require_relative '../node_modules/react-native/scripts/react_native_pods'

platform :ios, '16.0' # Mantido em 16.0 para compatibilidade
use_frameworks! :linkage => :static
use_modular_headers!

ENV['RCT_NEW_ARCH_ENABLED'] = '0' # Mantido para desabilitar explicitamente a Nova Arquitetura

require 'pathname'

# FUN√á√ÉO AUXILIAR config_get_react_native_path REMOVIDA
# Pois o caminho ser√° especificado diretamente abaixo, simplificando.

# üõ† Corrige build_type para libs espec√≠ficas (MANTER - Isso √© importante para Firebase)
pre_install do |installer|
  installer.pod_targets.each do |pod|
    if ['GTMAppAuth', 'GoogleUtilities'].include?(pod.name)
      def pod.build_type;
        Pod::BuildType.static_library
      end
    end
  end
end

post_install do |installer|

  # Fun√ß√£o auxiliar para copiar headers de um diret√≥rio de origem para um de destino
  def copy_react_native_headers(installer, src_base_path, dest_sub_path, files_to_copy = nil)
    react_native_path = File.expand_path("../node_modules/react-native", __dir__)
    full_src_dir = "#{react_native_path}/#{src_base_path}"
    full_dest_dir = "#{installer.sandbox.root}/Headers/Public/#{dest_sub_path}"

    FileUtils.mkdir_p(full_dest_dir) unless Dir.exist?(full_dest_dir)

    (files_to_copy || Dir.glob(File.join(full_src_dir, "*.h"))).each do |src_file|
      src = files_to_copy ? File.join(full_src_dir, src_file) : src_file
      filename = File.basename(src)
      dst = File.join(full_dest_dir, filename)

      if File.exist?(src)
        unless File.exist?(dst)
          FileUtils.cp(src, dst)
          puts "‚úÖ Copiado #{filename} de #{src_base_path} para #{dest_sub_path}"
        # else # Descomente se quiser ver todos os "j√° existe"
        #   puts "üîÅ #{filename} j√° existe em #{dest_sub_path}, pulando"
        end
      else
        puts "‚ö†Ô∏è AVISO: #{filename} n√£o encontrado em #{src}"
      end
    end
  end

  # CONSOLIDA√á√ÉO DAS C√ìPIAS DE HEADERS QUE PARECEM SER NECESS√ÅRIAS (MANTIDO)
  copy_react_native_headers(installer, "ReactCommon/react/renderer/components/view/platform/cxx/react/renderer/components/view", "ReactCommon/react/renderer/components/view", [
    "HostPlatformTouch.h", "HostPlatformViewEventEmitter.h", "HostPlatformViewProps.h", "HostPlatformViewTraitsInitializer.h"
  ])
  copy_react_native_headers(installer, "ReactCommon/react/renderer/imagemanager", "ReactCommon/react/renderer/imagemanager")
  copy_react_native_headers(installer, "ReactCommon/react/renderer/uimanager", "ReactCommon/react/renderer/uimanager")
  copy_react_native_headers(installer, "ReactCommon/react/renderer/core", "ReactCommon/react/renderer/core")
  copy_react_native_headers(installer, "React/Fabric/Mounting", "React")
  copy_react_native_headers(installer, "React/Fabric/Surface", "React")
  copy_react_native_headers(installer, "React/Fabric", "React")
  copy_react_native_headers(installer, "ReactCommon/react/renderer/graphics/platform/ios/react/renderer/graphics", "react/renderer/graphics")
  copy_react_native_headers(installer, "ReactCommon/runtimeexecutor/ReactCommon", "ReactCommon/react/utils", ["RuntimeExecutor.h"])
  copy_react_native_headers(installer, "ReactCommon/react/utils", "ReactCommon/react/utils")
  copy_react_native_headers(installer, "ReactCommon/react/debug", "ReactCommon/react/debug")
  copy_react_native_headers(installer, "ReactCommon/react/nativemodule/core/ReactCommon", "ReactCommon", [
    'TurboModule.h', 'TurboModuleBinding.h', 'TurboModuleUtils.h', 'CxxTurboModuleUtils.h', 'TurboModulePerfLogger.h', 'TurboCxxModule.h'
  ])
  copy_react_native_headers(installer, "ReactCommon/react/nativemodule/core/platform/ios/ReactCommon", "ReactCommon", [
    'RCTTurboModuleWithJSIBindings.h', 'RCTTurboModuleManager.h', 'RCTTurboModule.h'
  ]) 
  
  # FIM DA CONSOLIDA√á√ÉO DE C√ìPIAS DE HEADERS

  installer.pods_project.targets.each do |target|
  
	# Caminhos originais no node_modules
    react_native_path = File.expand_path("../node_modules/react-native", __dir__)
    react_common_path = "#{react_native_path}/ReactCommon"
    turbo_module_path = "#{react_common_path}/react/nativemodule/core"
    bridging_path = "#{react_common_path}/react/bridging"

    # Cria diret√≥rios e copia headers se necess√°rio
    [turbo_module_path, bridging_path].each do |src_path|
      if Dir.exist?(src_path)
        dst_path = "#{installer.sandbox.root}/Headers/Public/ReactCommon/#{File.basename(File.dirname(src_path))}/#{File.basename(src_path)}"
        FileUtils.mkdir_p(dst_path)

        Dir.glob(File.join(src_path, '*.h')).each do |src|
          filename = File.basename(src)
          dst = File.join(dst_path, filename)

          unless File.exist?(dst)
            FileUtils.cp(src, dst)
            puts "‚úÖ Copiado #{filename} para #{dst_path}"
          else
            puts "üîÅ J√° existe: #{filename}, pulando"
          end
        end
      else
        puts "‚ö†Ô∏è Diret√≥rio n√£o encontrado: #{src_path}"
      end
    end
  
    # Configura√ß√µes b√°sicas de build (essenciais para compatibilidade)
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
      config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++20'
      config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'

      # Header Search Paths atualizados - REATIVADO para garantir que React Native e suas depend√™ncias encontrem seus headers
      header_search_paths = [
        '$(inherited)',
        '"$(PODS_ROOT)/Headers/Public"',
        '"$(PODS_ROOT)/Headers/Public/ReactCommon"',
        '"$(PODS_ROOT)/Headers/Public/ReactCommon/react/nativemodule/core"',
        '"$(PODS_ROOT)/Headers/Public/ReactCommon/react/bridging"',
        '"$(PODS_ROOT)/Headers/Public/DoubleConversion"',
        '"$(PODS_ROOT)/DoubleConversion"', # Inclui o pr√≥prio pod
        '"$(PODS_ROOT)/boost"',
        '"$(PODS_ROOT)/RCT-Folly"',
        '"$(PODS_ROOT)/fmt/include"',
        '"$(PODS_CONFIGURATION_BUILD_DIR)/React-Core/React-Core.framework/Headers"',
        '"${PODS_ROOT}/Headers/Private/React-Fabric"',
        '"${PODS_ROOT}/Headers/Public/React-hermes"',
        '"${PODS_ROOT}/Headers/Public/React-RCTFabric"',
		'"$(PODS_ROOT)/Headers/Public/ReactCommon/react/renderer/components/view"',
		'"$(PODS_ROOT)/Headers/Public/ReactCommon/react/renderer/components/view/platform/cxx"'
      ].uniq

      config.build_settings['HEADER_SEARCH_PATHS'] = header_search_paths.join(' ')
      config.build_settings['FRAMEWORK_SEARCH_PATHS'] = ['$(inherited)', '"$(PODS_CONFIGURATION_BUILD_DIR)"']
    end
  end
 
	
	# ‚ö†Ô∏è Hotfix para FirebaseAuth < 10.32.0 com RNFBAuth
	rnfb_auth_path = '../node_modules/@react-native-firebase/auth/ios/RNFBAuth/RNFBAuthModule.m'
	if File.exist?(rnfb_auth_path)
	  text = File.read(rnfb_auth_path)
	  unless text.include?('// [Patched] setLinkDomain:')
		text.gsub!(/(\[settings setLinkDomain:.*?;)/, '// [Patched] \1')
		File.open(rnfb_auth_path, "w") { |file| file.puts text }
		puts "‚úÖ RNFBAuthModule.m patched to disable setLinkDomain:"
	  else
		puts "üîÅ RNFBAuthModule.m already patched"
	  end
	else
	  puts "‚ö†Ô∏è RNFBAuthModule.m not found! Skipping patch."
	end



  # Configura√ß√µes para todos os m√≥dulos Firebase (MANTER - ESSAS S√ÉO IMPORTANTES)
  installer.pods_project.targets.each do |target|
    if target.name.start_with?('Firebase')
      target.build_configurations.each do |config|
        config.build_settings['DEFINES_MODULE'] = 'YES'
        config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
        config.build_settings['OTHER_CFLAGS'] = '$(inherited) -DFIREBASE_BUILD_CORE_INTERNAL'
      end
    end
     
    if target.name == 'RNFBAuth'
      target.build_configurations.each do |config|
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
        # config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'DISABLE_FIREBASE_LINK_DOMAIN=1'
      end
    end

    # Ajustes Yoga (MANTER - ISSO GERALMENTE √â UMA CORRE√á√ÉO V√ÅLIDA)
    if target.name == 'Yoga'
      phase = target.build_phases.find { |p| p.display_name == 'Copy Headers' }
      if phase
        phase.files.delete_if do |file|
          file.file_ref.path.include?('yoga/enums/Align.h') ||
          file.file_ref.path.include?('yoga/enums/FlexDirection.h')
        end
      end
    end

    # Configura√ß√µes globais adicionais para todos os targets
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      config.build_settings['ALWAYS_SEARCH_USER_PATHS'] = 'NO'
      config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++20'
      config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
      config.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'gnu11'
      config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      config.build_settings['OTHER_CFLAGS'] ||= ['$(inherited)']
      config.build_settings['OTHER_CFLAGS'] << '-DFIREBASE_BUILD_CORE_INTERNAL'
    end
  end

  installer.pods_project.build_configurations.each do |config|
    config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++20'
    config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
    config.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'c11'
    config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
	config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
  end
  
  # ‚ö†Ô∏è Desabilita script problem√°tico de codegen para evitar erro no EAS
  installer.pods_project.targets.each do |target|
    next unless target.name == 'React-RCTFBReactNativeSpec'

    target.build_phases.delete_if do |phase|
      phase.respond_to?(:name) && phase.name.to_s.include?("[RN]Check FBReactNativeSpec")
    end

    puts "‚úÖ Script '[RN]Check FBReactNativeSpec' removido de '#{target.name}'"
  end
  
  installer.pods_project.targets.each do |target|
    next unless target.name == 'React-Fabric'

    target.build_phases.delete_if do |phase|
	  phase.respond_to?(:name) && phase.name.to_s.include?("[RN]Check rncore")
    end

    puts "‚úÖ Script '[RN]Check rncore' removido de '#{target.name}'"
  end
  
  installer.pods_project.targets.each do |target|
    next unless target.name == 'React-FabricComponents'

    target.build_phases.delete_if do |phase|
	  phase.respond_to?(:name) && phase.name.to_s.include?("[RN]Check rncore")
    end

    puts "‚úÖ Script '[RN]Check rncore' removido de '#{target.name}'"
  end  

  # üîÅ REMOVE arquivos duplicados do React-Codegen (MANTER - ISSO √â UMA CORRE√á√ÉO V√ÅLIDA)
  codegen_target = installer.pods_project.targets.find { |t| t.name == 'React-Codegen' }
  if codegen_target
    phase = codegen_target.build_phases.find { |p| p.display_name == 'Compile Sources' }
    if phase
      phase.files.each do |file|
        if file.file_ref.path.include?("States.cpp")
          phase.remove_file_reference(file.file_ref)
        end
      end
    end
  end
end

$FirebaseSDKVersion = '10.25.0'

target 'modamaskavo' do
  # REATIVADO e SIMPLIFICADO: use_react_native!
  # O caminho agora √© direto, sem a fun√ß√£o auxiliar.
  use_react_native!(
    :path => '../node_modules/react-native', # Caminho relativo direto para react-native
    :hermes_enabled => false,
    :fabric_enabled => true,
	:production => true
  )

  # Depend√™ncias manuais (TODAS REATIVADAS)
  pod 'RNSVG', :path => '../node_modules/react-native-svg'
  pod 'RNScreens', :path => '../node_modules/react-native-screens'
  pod 'RNFBAuth', :path => '../node_modules/@react-native-firebase/auth'
  pod 'RNFBApp', :path => '../node_modules/@react-native-firebase/app'

  # Firebase - Configura√ß√£o especial para v22.1.0 (MANTER)
  pod 'Firebase', $FirebaseSDKVersion
  pod 'FirebaseCore', $FirebaseSDKVersion
  pod 'FirebaseCoreInternal', $FirebaseSDKVersion do |s|
    s.source_files = 'FirebaseCoreInternal/Sources/**/*.{h,m}'
    s.pod_target_xcconfig = {
      'DEFINES_MODULE' => 'YES',
      'OTHER_CFLAGS' => '-DFIREBASE_BUILD_CORE_INTERNAL'
    }
  end
  pod 'FirebaseAuth', $FirebaseSDKVersion
  
  pod 'FirebaseAuthInterop', $FirebaseSDKVersion
  pod 'FirebaseAppCheckInterop', $FirebaseSDKVersion
  
  pod 'FirebaseDatabase', $FirebaseSDKVersion
  pod 'FirebaseStorage', $FirebaseSDKVersion
  pod 'FirebaseInstallations', $FirebaseSDKVersion

  pod 'GoogleDataTransport'
  pod 'nanopb'
  pod 'PromisesObjC'

  # HEADERS corrigidos (MANTER)
  pod 'GoogleUtilities'
  pod 'GTMAppAuth'

  # Outros pods nativos (TODAS REATIVADAS)
  pod 'DoubleConversion', :podspec => '../node_modules/react-native/third-party-podspecs/DoubleConversion.podspec'
  pod 'RCT-Folly', :podspec => '../node_modules/react-native/third-party-podspecs/RCT-Folly.podspec'
  pod 'boost', :podspec => '../node_modules/react-native/third-party-podspecs/boost.podspec'
  pod 'fmt', :podspec => '../node_modules/react-native/third-party-podspecs/fmt.podspec'
end
