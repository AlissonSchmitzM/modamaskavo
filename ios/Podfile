require_relative '../node_modules/react-native/scripts/react_native_pods'

platform :ios, '16.0' # Mantido em 16.0 para compatibilidade
use_frameworks! :linkage => :static
use_modular_headers!

ENV['RCT_NEW_ARCH_ENABLED'] = '0' # Mantido para desabilitar explicitamente a Nova Arquitetura

require 'pathname'

# FUN√á√ÉO AUXILIAR config_get_react_native_path REMOVIDA
# Pois o caminho ser√° especificado diretamente abaixo, simplificando.

# üõ† Corrige build_type para libs espec√≠ficas (MANTER - Isso √© importante para Firebase)
pre_install do |installer|
  installer.pod_targets.each do |pod|
    if ['GTMAppAuth', 'GoogleUtilities'].include?(pod.name)
      def pod.build_type;
        Pod::BuildType.static_library
      end
    end
  end
end

post_install do |installer|
  # A√ß√µes de post_install reativadas para corrigir "file not found" para headers React Native.
  # As se√ß√µes de c√≥pia de arquivos foram removidas, mas os ajustes de HEADER_SEARCH_PATHS s√£o essenciais.

  installer.pods_project.targets.each do |target|
  
	# Caminhos originais no node_modules
    react_native_path = File.expand_path("../node_modules/react-native", __dir__)
    react_common_path = "#{react_native_path}/ReactCommon"
    turbo_module_path = "#{react_common_path}/react/nativemodule/core"
    bridging_path = "#{react_common_path}/react/bridging"

    # Cria diret√≥rios e copia headers se necess√°rio
    [turbo_module_path, bridging_path].each do |src_path|
      if Dir.exist?(src_path)
        dst_path = "#{installer.sandbox.root}/Headers/Public/ReactCommon/#{File.basename(File.dirname(src_path))}/#{File.basename(src_path)}"
        FileUtils.mkdir_p(dst_path)

        Dir.glob(File.join(src_path, '*.h')).each do |src|
          filename = File.basename(src)
          dst = File.join(dst_path, filename)

          unless File.exist?(dst)
            FileUtils.cp(src, dst)
            puts "‚úÖ Copiado #{filename} para #{dst_path}"
          else
            puts "üîÅ J√° existe: #{filename}, pulando"
          end
        end
      else
        puts "‚ö†Ô∏è Diret√≥rio n√£o encontrado: #{src_path}"
      end
    end
	
	  # 1. Configura√ß√£o dos paths do TurboModule
	  # 1. Caminhos dos arquivos TurboModule
	  turbo_files = {
		'TurboModule.h' => "#{react_native_path}/ReactCommon/react/nativemodule/core/ReactCommon/TurboModule.h",
		'TurboModuleBinding.h' => "#{react_native_path}/ReactCommon/react/nativemodule/core/ReactCommon/TurboModuleBinding.h",
		'TurboModuleUtils.h' => "#{react_native_path}/ReactCommon/react/nativemodule/core/ReactCommon/TurboModuleUtils.h",
	  }

	  # 2. Diret√≥rios de destino
	  headers_dest_dir = "#{installer.sandbox.root}/Headers/Public/ReactCommon"
	  react_common_dest_dir = "#{react_native_path}/ReactCommon"

	  # 3. C√≥pia dos arquivos para ambos os locais necess√°rios
	  turbo_files.each do |filename, src_path|
		if File.exist?(src_path)
		  # C√≥pia para Headers do CocoaPods
		  FileUtils.mkdir_p(headers_dest_dir)
		  FileUtils.cp(src_path, "#{headers_dest_dir}/#{filename}")
		  puts "‚úÖ #{filename} copiado para #{headers_dest_dir}"

		  # C√≥pia para ReactCommon (caso necess√°rio)
		  FileUtils.mkdir_p(react_common_dest_dir)
		  FileUtils.cp(src_path, "#{react_common_dest_dir}/#{filename}")
		  puts "‚úÖ #{filename} copiado para #{react_common_dest_dir}"
		else
		  puts "‚ö†Ô∏è ATEN√á√ÉO: Arquivo n√£o encontrado em #{src_path}"
		end
	  end
	  
  headers_to_copy = {
    'CxxTurboModuleUtils.h' => "#{react_native_path}/ReactCommon/react/nativemodule/core/ReactCommon",
    'TurboModulePerfLogger.h' => "#{react_native_path}/ReactCommon/react/nativemodule/core/ReactCommon"
  }

  # 2. C√≥pia dos headers necess√°rios
  headers_to_copy.each do |header, src_dir|
    src_path = "#{src_dir}/#{header}"
    dest_dir = "#{installer.sandbox.root}/Headers/Public/ReactCommon"
    
    if File.exist?(src_path)
      FileUtils.mkdir_p(dest_dir)
      FileUtils.cp(src_path, "#{dest_dir}/#{header}")
      puts "‚úÖ #{header} copiado para #{dest_dir}"
    else
      puts "‚ö†Ô∏è ATEN√á√ÉO: Arquivo n√£o encontrado em #{src_path}"
      # Fallback: Verifica em locais alternativos
      alternative_path = "#{react_native_path}/ReactCommon/#{header}"
      if File.exist?(alternative_path)
        FileUtils.cp(alternative_path, "#{dest_dir}/#{header}")
        puts "‚úÖ #{header} encontrado em local alternativo e copiado"
      end
    end
  end
  
    react_native_path = File.expand_path("../node_modules/react-native", __dir__)
  headers_to_fix = {
    'RCTTurboModuleWithJSIBindings.h' => "#{react_native_path}/ReactCommon/react/nativemodule/core/platform/ios/ReactCommon",
    'TurboCxxModule.h' => "#{react_native_path}/ReactCommon/react/nativemodule/core/ReactCommon"
  }

  # 2. C√≥pia dos headers necess√°rios
  headers_to_fix.each do |header, src_dir|
    src_path = "#{src_dir}/#{header}"
    dest_dir = "#{installer.sandbox.root}/Headers/Public/ReactCommon"
    
    if File.exist?(src_path)
      FileUtils.mkdir_p(dest_dir)
      FileUtils.cp(src_path, "#{dest_dir}/#{header}")
      puts "‚úÖ #{header} copiado para #{dest_dir}"
    else
      puts "‚ö†Ô∏è ATEN√á√ÉO: Arquivo n√£o encontrado em #{src_path}"
      # Fallback: Verifica em locais alternativos
      alternative_path = "#{react_native_path}/ReactCommon/#{header}"
      if File.exist?(alternative_path)
        FileUtils.cp(alternative_path, "#{dest_dir}/#{header}")
        puts "‚úÖ #{header} encontrado em local alternativo"
      else
        # Cria header m√≠nimo se n√£o existir
        abort("‚ùå ERRO: Header #{header} n√£o encontrado! Isso vai quebrar a build.")
        # puts "‚ö†Ô∏è Criado header m√≠nimo em #{dest_dir}/#{header}"
      end
    end
  end
  
    # Configura√ß√µes b√°sicas de build (essenciais para compatibilidade)
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
      config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++20'
      config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'

      # Header Search Paths atualizados - REATIVADO para garantir que React Native e suas depend√™ncias encontrem seus headers
      header_search_paths = [
        '$(inherited)',
        '"$(PODS_ROOT)/Headers/Public"',
        '"$(PODS_ROOT)/Headers/Public/ReactCommon"',
        '"$(PODS_ROOT)/Headers/Public/ReactCommon/react/nativemodule/core"',
        '"$(PODS_ROOT)/Headers/Public/ReactCommon/react/bridging"',
        '"$(PODS_ROOT)/Headers/Public/DoubleConversion"',
        '"$(PODS_ROOT)/DoubleConversion"', # Inclui o pr√≥prio pod
        '"$(PODS_ROOT)/boost"',
        '"$(PODS_ROOT)/RCT-Folly"',
        '"$(PODS_ROOT)/fmt/include"',
        '"$(PODS_CONFIGURATION_BUILD_DIR)/React-Core/React-Core.framework/Headers"',
        '"${PODS_ROOT}/Headers/Private/React-Fabric"',
        '"${PODS_ROOT}/Headers/Public/React-hermes"',
        '"${PODS_ROOT}/Headers/Public/React-RCTFabric"'
      ].uniq

      config.build_settings['HEADER_SEARCH_PATHS'] = header_search_paths.join(' ')
      config.build_settings['FRAMEWORK_SEARCH_PATHS'] = ['$(inherited)', '"$(PODS_CONFIGURATION_BUILD_DIR)"']
    end
  end

  # Configura√ß√µes para todos os m√≥dulos Firebase (MANTER - ESSAS S√ÉO IMPORTANTES)
  installer.pods_project.targets.each do |target|
    if target.name.start_with?('Firebase')
      target.build_configurations.each do |config|
        config.build_settings['DEFINES_MODULE'] = 'YES'
        config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
        config.build_settings['OTHER_CFLAGS'] = '$(inherited) -DFIREBASE_BUILD_CORE_INTERNAL'
      end
    end
    
    if target.name == 'RNFBAuth'
      target.build_configurations.each do |config|
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'DISABLE_FIREBASE_LINK_DOMAIN=1'
      end
    end

    # Ajustes Yoga (MANTER - ISSO GERALMENTE √â UMA CORRE√á√ÉO V√ÅLIDA)
    if target.name == 'Yoga'
      phase = target.build_phases.find { |p| p.display_name == 'Copy Headers' }
      if phase
        phase.files.delete_if do |file|
          file.file_ref.path.include?('yoga/enums/Align.h') ||
          file.file_ref.path.include?('yoga/enums/FlexDirection.h')
        end
      end
    end

    # Configura√ß√µes globais adicionais para todos os targets
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      config.build_settings['ALWAYS_SEARCH_USER_PATHS'] = 'NO'
      config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++20'
      config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
      config.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'gnu11'
      config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      config.build_settings['OTHER_CFLAGS'] ||= ['$(inherited)']
      config.build_settings['OTHER_CFLAGS'] << '-DFIREBASE_BUILD_CORE_INTERNAL'
    end
  end

  installer.pods_project.build_configurations.each do |config|
    config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
    config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
    config.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'c11'
    config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
  end

  # üîÅ REMOVE arquivos duplicados do React-Codegen (MANTER - ISSO √â UMA CORRE√á√ÉO V√ÅLIDA)
  codegen_target = installer.pods_project.targets.find { |t| t.name == 'React-Codegen' }
  if codegen_target
    phase = codegen_target.build_phases.find { |p| p.display_name == 'Compile Sources' }
    if phase
      phase.files.each do |file|
        if file.file_ref.path.include?("States.cpp")
          phase.remove_file_reference(file.file_ref)
        end
      end
    end
  end
end

$FirebaseSDKVersion = '10.29.0'

target 'modamaskavo' do
  # REATIVADO e SIMPLIFICADO: use_react_native!
  # O caminho agora √© direto, sem a fun√ß√£o auxiliar.
  use_react_native!(
    :path => '../node_modules/react-native', # Caminho relativo direto para react-native
    :hermes_enabled => false,
    :fabric_enabled => false
  )

  # Depend√™ncias manuais (TODAS REATIVADAS)
  pod 'RNSVG', :path => '../node_modules/react-native-svg'
  pod 'RNScreens', :path => '../node_modules/react-native-screens'
  pod 'RNFBAuth', :path => '../node_modules/@react-native-firebase/auth'
  pod 'RNFBApp', :path => '../node_modules/@react-native-firebase/app'

  # Firebase - Configura√ß√£o especial para v22.1.0 (MANTER)
  pod 'Firebase', $FirebaseSDKVersion
  pod 'FirebaseCore', $FirebaseSDKVersion
  pod 'FirebaseCoreInternal', $FirebaseSDKVersion do |s|
    s.source_files = 'FirebaseCoreInternal/Sources/**/*.{h,m}'
    s.pod_target_xcconfig = {
      'DEFINES_MODULE' => 'YES',
      'OTHER_CFLAGS' => '-DFIREBASE_BUILD_CORE_INTERNAL'
    }
  end
  pod 'FirebaseAuth', $FirebaseSDKVersion
  
  pod 'FirebaseAuthInterop', $FirebaseSDKVersion
  pod 'FirebaseAppCheckInterop', $FirebaseSDKVersion
  
  pod 'FirebaseDatabase', $FirebaseSDKVersion
  pod 'FirebaseStorage', $FirebaseSDKVersion
  pod 'FirebaseInstallations', $FirebaseSDKVersion

  pod 'GoogleDataTransport'
  pod 'nanopb'
  pod 'PromisesObjC'

  # HEADERS corrigidos (MANTER)
  pod 'GoogleUtilities'
  pod 'GTMAppAuth'

  # Outros pods nativos (TODAS REATIVADAS)
  pod 'DoubleConversion', :podspec => '../node_modules/react-native/third-party-podspecs/DoubleConversion.podspec'
  pod 'RCT-Folly', :podspec => '../node_modules/react-native/third-party-podspecs/RCT-Folly.podspec'
  pod 'boost', :podspec => '../node_modules/react-native/third-party-podspecs/boost.podspec'
  pod 'fmt', :podspec => '../node_modules/react-native/third-party-podspecs/fmt.podspec'
end
