workflows:
  ios-workflow-fixed-deployment:
    name: iOS Build com Deployment Target Correto
    instance_type: mac_mini_m1
    environment:
      node: 18
      xcode: latest
    scripts:
      - name: Install npm dependencies
        script: |
          echo "üì¶ Instalando depend√™ncias npm..."
          npm install
          
      - name: Verificar e corrigir Podfile
        script: |
          cd ios
          
          echo "üîç Verificando Podfile..."
          
          if [ -f "Podfile" ]; then
            echo "üìÑ Conte√∫do atual do Podfile:"
            cat Podfile
            
            echo ""
            echo "üîß Corrigindo deployment target no Podfile..."
            
            # Fazer backup do Podfile original
            cp Podfile Podfile.backup
            
            # Corrigir o deployment target para iOS 13.0 ou superior
            sed -i '' 's/platform :ios, .*/platform :ios, '\''13.0'\''/' Podfile
            
            # Se n√£o encontrou a linha platform, adicionar no in√≠cio
            if ! grep -q "platform :ios" Podfile; then
              echo "platform :ios, '13.0'" | cat - Podfile > temp && mv temp Podfile
            fi
            
            # Adicionar post_install hook para for√ßar deployment target
            if ! grep -q "post_install" Podfile; then
              cat >> Podfile << 'EOF'

post_install do |installer|
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
    end
  end
end
EOF
            fi
            
            echo ""
            echo "üìÑ Podfile corrigido:"
            cat Podfile
            
          else
            echo "‚ùå Podfile n√£o encontrado!"
            exit 1
          fi
          
      - name: Limpar cache e instalar CocoaPods
        script: |
          cd ios
          
          echo "üßπ Limpando cache e instala√ß√µes anteriores..."
          
          # Remover instala√ß√µes anteriores
          rm -rf Pods
          rm -f Podfile.lock
          
          # Limpar cache do CocoaPods
          pod cache clean --all
          
          # Limpar cache do npm (pode afetar depend√™ncias)
          npm cache clean --force
          
          echo "üì¶ Instalando CocoaPods com deployment target correto..."
          
          # Instalar com verbose para ver o progresso
          pod install --verbose --repo-update
          
          POD_RESULT=$?
          
          if [ $POD_RESULT -eq 0 ]; then
            echo "‚úÖ CocoaPods instalado com sucesso!"
          else
            echo "‚ùå CocoaPods falhou novamente!"
            echo "üîç Tentando com --deployment-target expl√≠cito..."
            
            # Tentar for√ßar deployment target
            pod install --verbose --repo-update --deployment-target=13.0
            
            POD_RESULT=$?
            
            if [ $POD_RESULT -ne 0 ]; then
              echo "‚ùå Falha total no CocoaPods!"
              exit 1
            fi
          fi
          
      - name: Verificar instala√ß√£o do CocoaPods
        script: |
          cd ios
          
          echo "üîç Verificando instala√ß√£o do CocoaPods..."
          
          # Verificar se workspace foi criado
          if [ -f "modamaskavo.xcworkspace/contents.xcworkspacedata" ]; then
            echo "‚úÖ Workspace criado com sucesso!"
          else
            echo "‚ùå Workspace n√£o foi criado!"
            exit 1
          fi
          
          # Verificar se Pods foram instalados
          if [ -d "Pods" ]; then
            echo "‚úÖ Pasta Pods criada!"
            echo "üìÅ Pods principais instalados:"
            ls -la Pods/ | grep -E "(React|RN)" | head -10
          else
            echo "‚ùå Pasta Pods n√£o encontrada!"
            exit 1
          fi
          
          # Verificar Podfile.lock
          if [ -f "Podfile.lock" ]; then
            echo "‚úÖ Podfile.lock criado!"
            echo "üìä Deployment target no Podfile.lock:"
            grep -A 5 -B 5 "IPHONEOS_DEPLOYMENT_TARGET" Podfile.lock || echo "N√£o encontrado"
          else
            echo "‚ùå Podfile.lock n√£o encontrado!"
            exit 1
          fi
          
      - name: Build iOS com workspace
        script: |
          cd ios
          
          mkdir -p build
          
          echo "üî® Iniciando build com workspace e deployment target correto..."
          
          # Build usando workspace
          xcodebuild -workspace modamaskavo.xcworkspace \
                     -scheme modamaskavo \
                     -configuration Release \
                     -destination generic/platform=iOS \
                     -archivePath build/modamaskavo.xcarchive \
                     archive \
                     CODE_SIGNING_REQUIRED=NO \
                     CODE_SIGNING_ALLOWED=NO \
                     SKIP_INSTALL=NO \
                     ONLY_ACTIVE_ARCH=NO \
                     IPHONEOS_DEPLOYMENT_TARGET=13.0 \
                     -allowProvisioningUpdates \
                     2>&1 | tee build-success.log
          
          BUILD_RESULT=$?
          
          echo ""
          echo "üìä Resultado do build: $BUILD_RESULT"
          
          if [ $BUILD_RESULT -eq 0 ]; then
            echo "‚úÖ BUILD SUCESSO!"
            
            # Verificar se archive foi criado
            if [ -d "build/modamaskavo.xcarchive" ]; then
              echo "‚úÖ Archive criado com sucesso!"
              
              # Mostrar tamanho do archive
              ARCHIVE_SIZE=$(du -sh build/modamaskavo.xcarchive | cut -f1)
              echo "üìä Tamanho do archive: $ARCHIVE_SIZE"
              
              # Procurar por .app
              echo "üì± Procurando .app no archive:"
              find build/modamaskavo.xcarchive -name "*.app" -type d -exec ls -lah {} \;
              
            else
              echo "‚ùå Archive n√£o foi criado!"
            fi
          else
            echo "‚ùå Build falhou!"
            echo "üîç √öltimas linhas do erro:"
            tail -50 build-success.log
            
            # Procurar por erros espec√≠ficos
            echo ""
            echo "üîç Erros relacionados ao deployment target:"
            grep -i "deployment" build-success.log || echo "Nenhum erro de deployment encontrado"
            
            echo ""
            echo "üîç Outros erros:"
            grep -i "error:" build-success.log | head -10
          fi
          
      - name: Criar IPA do archive
        script: |
          cd ios
          
          echo "üì¶ Criando IPA do archive..."
          
          # Verificar se archive existe
          if [ -d "build/modamaskavo.xcarchive" ]; then
            echo "‚úÖ Archive encontrado!"
            
            # Procurar por .app no archive
            APP_PATH=$(find build/modamaskavo.xcarchive -name "*.app" -type d | head -1)
            
            if [ -n "$APP_PATH" ]; then
              echo "üì± App encontrado: $APP_PATH"
              
              # Verificar tamanho do app
              APP_SIZE=$(du -sh "$APP_PATH" | cut -f1)
              FILE_COUNT=$(find "$APP_PATH" -type f | wc -l)
              
              echo "üìä Tamanho do app: $APP_SIZE"
              echo "üìÑ N√∫mero de arquivos: $FILE_COUNT"
              
              # Verificar se app tem conte√∫do React Native
              if find "$APP_PATH" -name "*React*" -o -name "*RN*" | head -5; then
                echo "‚úÖ App cont√©m componentes React Native!"
              else
                echo "‚ö†Ô∏è  App pode n√£o conter React Native"
              fi
              
              # Criar IPA
              cd build
              
              # Copiar .app
              cp -r "$APP_PATH" ./modamaskavo.app
              
              # Criar estrutura IPA
              mkdir -p Payload
              cp -r modamaskavo.app Payload/
              
              # Criar ZIP/IPA
              zip -r modamaskavo.ipa Payload/
              
              # Verificar IPA criado
              if [ -f "modamaskavo.ipa" ]; then
                IPA_SIZE=$(du -sh modamaskavo.ipa | cut -f1)
                IPA_BYTES=$(wc -c < modamaskavo.ipa)
                
                echo "‚úÖ IPA criado com sucesso!"
                echo "üìä Tamanho do IPA: $IPA_SIZE ($IPA_BYTES bytes)"
                
                # Copiar para raiz
                cp modamaskavo.ipa ../../modamaskavo-react-native.ipa
                
                if [ $IPA_BYTES -gt 10000000 ]; then  # Maior que 10MB
                  echo "üéâ IPA parece v√°lido para React Native (maior que 10MB)!"
                else
                  echo "‚ö†Ô∏è  IPA ainda pequeno para React Native, mas foi criado"
                fi
                
                # Verificar conte√∫do do IPA
                echo "üìÑ Primeiros arquivos do IPA:"
                unzip -l modamaskavo.ipa | head -20
                
              else
                echo "‚ùå Falha ao criar IPA!"
              fi
            else
              echo "‚ùå Nenhum .app encontrado no archive!"
            fi
          else
            echo "‚ùå Archive n√£o existe - build falhou!"
          fi
          
      - name: Relat√≥rio final
        script: |
          echo "üìã RELAT√ìRIO FINAL"
          echo "=================="
          
          # Verificar IPAs criados
          echo "üì± IPAs encontrados:"
          find . -name "*.ipa" -exec ls -lh {} \;
          
          # Status do build
          echo ""
          echo "üìä Status do build:"
          if [ -f "ios/build-success.log" ]; then
            if grep -q "BUILD SUCCEEDED" ios/build-success.log; then
              echo "‚úÖ Build bem-sucedido!"
            else
              echo "‚ùå Build falhou"
            fi
          fi
          
          # Status do CocoaPods
          echo ""
          echo "üìä Status CocoaPods:"
          if [ -f "ios/Podfile.lock" ]; then
            echo "‚úÖ Podfile.lock criado"
            echo "üìä Deployment target usado:"
            grep "IPHONEOS_DEPLOYMENT_TARGET" ios/Podfile.lock | head -1
          else
            echo "‚ùå Podfile.lock n√£o encontrado"
          fi
          
          # Status do workspace
          if [ -f "ios/modamaskavo.xcworkspace/contents.xcworkspacedata" ]; then
            echo "‚úÖ Workspace criado"
          else
            echo "‚ùå Workspace n√£o criado"
          fi
          
    artifacts:
      - ios/build/*.ipa
      - ios/build/*.app
      - ios/build/*.xcarchive
      - ios/build-success.log
      - ios/Podfile.lock
      - ios/Podfile.backup
      - "*.ipa"
