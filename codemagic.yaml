workflows:
  ios-workflow-fixed:
    name: iOS Build com Podfile Correto
    instance_type: mac_mini_m1
    environment:
      node: 18
      xcode: latest
    scripts:
      - name: Install npm dependencies
        script: |
          echo "üì¶ Instalando depend√™ncias npm..."
          npm install
          
      - name: Verificar e corrigir Podfile
        script: |
          cd ios
          
          echo "üîç Verificando Podfile..."
          
          if [ -f "Podfile" ]; then
            echo "üìÑ Conte√∫do atual do Podfile:"
            cat Podfile
            
            echo ""
            echo "üîß Corrigindo deployment target no Podfile..."
            
            # Fazer backup do Podfile original
            cp Podfile Podfile.backup
            
            # Usar sed para corrigir o deployment target
            sed -i.bak "s/platform :ios, '[^']*'/platform :ios, '13.0'/" Podfile
            
            # Se n√£o encontrou a linha platform, adicionar no in√≠cio
            if ! grep -q "platform :ios" Podfile; then
              # Criar novo Podfile com platform correto
              echo "platform :ios, '13.0'" > Podfile.new
              cat Podfile >> Podfile.new
              mv Podfile.new Podfile
            fi
            
            # Verificar se tem post_install, se n√£o tiver, adicionar
            if ! grep -q "post_install" Podfile; then
              echo "" >> Podfile
              echo "post_install do |installer|" >> Podfile
              echo "  installer.pods_project.targets.each do |target|" >> Podfile
              echo "    target.build_configurations.each do |config|" >> Podfile
              echo "      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'" >> Podfile
              echo "    end" >> Podfile
              echo "  end" >> Podfile
              echo "end" >> Podfile
            fi
            
            echo ""
            echo "üìÑ Podfile corrigido:"
            cat Podfile
            
          else
            echo "‚ùå Podfile n√£o encontrado!"
            exit 1
          fi
          
      - name: Limpar cache e instalar CocoaPods
        script: |
          cd ios
          
          echo "üßπ Limpando cache e instala√ß√µes anteriores..."
          
          # Remover instala√ß√µes anteriores
          rm -rf Pods
          rm -f Podfile.lock
          
          # Limpar cache do CocoaPods
          pod cache clean --all
          
          echo "üì¶ Instalando CocoaPods..."
          
          # Instalar com verbose para ver o progresso
          pod install --verbose --repo-update 2>&1 | tee pod-install.log
          
          POD_RESULT=$?
          
          if [ $POD_RESULT -eq 0 ]; then
            echo "‚úÖ CocoaPods instalado com sucesso!"
          else
            echo "‚ùå CocoaPods falhou!"
            echo "üîç √öltimas linhas do erro:"
            tail -30 pod-install.log
            
            # Procurar por erros espec√≠ficos
            echo ""
            echo "üîç Erros espec√≠ficos:"
            grep -i "error" pod-install.log | head -5
            
            exit 1
          fi
          
      - name: Verificar instala√ß√£o do CocoaPods
        script: |
          cd ios
          
          echo "üîç Verificando instala√ß√£o do CocoaPods..."
          
          # Verificar se workspace foi criado
          if [ -f "modamaskavo.xcworkspace/contents.xcworkspacedata" ]; then
            echo "‚úÖ Workspace criado com sucesso!"
          else
            echo "‚ùå Workspace n√£o foi criado!"
            exit 1
          fi
          
          # Verificar se Pods foram instalados
          if [ -d "Pods" ]; then
            echo "‚úÖ Pasta Pods criada!"
            echo "üìÅ Pods principais instalados:"
            ls -la Pods/ | grep -E "(React|RN|Folly)" | head -10
          else
            echo "‚ùå Pasta Pods n√£o encontrada!"
            exit 1
          fi
          
          # Verificar Podfile.lock
          if [ -f "Podfile.lock" ]; then
            echo "‚úÖ Podfile.lock criado!"
          else
            echo "‚ùå Podfile.lock n√£o encontrado!"
            exit 1
          fi
          
      - name: Build iOS com workspace
        script: |
          cd ios
          
          mkdir -p build
          
          echo "üî® Iniciando build com workspace..."
          
          # Build usando workspace
          xcodebuild -workspace modamaskavo.xcworkspace \
                     -scheme modamaskavo \
                     -configuration Release \
                     -destination generic/platform=iOS \
                     -archivePath build/modamaskavo.xcarchive \
                     archive \
                     CODE_SIGNING_REQUIRED=NO \
                     CODE_SIGNING_ALLOWED=NO \
                     SKIP_INSTALL=NO \
                     ONLY_ACTIVE_ARCH=NO \
                     IPHONEOS_DEPLOYMENT_TARGET=13.0 \
                     -allowProvisioningUpdates \
                     2>&1 | tee build-success.log
          
          BUILD_RESULT=$?
          
          echo ""
          echo "üìä Resultado do build: $BUILD_RESULT"
          
          if [ $BUILD_RESULT -eq 0 ]; then
            echo "‚úÖ BUILD SUCESSO!"
            
            # Verificar se archive foi criado
            if [ -d "build/modamaskavo.xcarchive" ]; then
              echo "‚úÖ Archive criado!"
              
              # Procurar por .app
              APP_PATH=$(find build/modamaskavo.xcarchive -name "*.app" -type d | head -1)
              
              if [ -n "$APP_PATH" ]; then
                echo "üì± App encontrado: $APP_PATH"
                
                # Criar IPA
                cd build
                cp -r "$APP_PATH" ./modamaskavo.app
                mkdir -p Payload
                cp -r modamaskavo.app Payload/
                zip -r modamaskavo.ipa Payload/
                
                if [ -f "modamaskavo.ipa" ]; then
                  IPA_SIZE=$(du -sh modamaskavo.ipa | cut -f1)
                  echo "‚úÖ IPA criado: $IPA_SIZE"
                  cp modamaskavo.ipa ../../modamaskavo-final.ipa
                fi
              fi
            fi
          else
            echo "‚ùå Build falhou!"
            tail -30 build-success.log
          fi
          
      - name: Relat√≥rio final
        script: |
          echo "üìã RELAT√ìRIO FINAL"
          echo "=================="
          
          echo "üì± IPAs encontrados:"
          find . -name "*.ipa" -exec ls -lh {} \;
          
    artifacts:
      - ios/build/*.ipa
      - ios/build/*.app
      - ios/build/*.xcarchive
      - ios/build-success.log
      - ios/pod-install.log
      - ios/Podfile.lock
      - "*.ipa"
