workflows:
  ios-workflow-debug-pods:
    name: iOS Build - Debug CocoaPods
    instance_type: mac_mini_m1
    environment:
      node: 18
      xcode: latest
    scripts:
      - name: Install npm dependencies
        script: |
          echo "üì¶ Instalando depend√™ncias npm..."
          npm install
          
      - name: Verificar estrutura antes do pod install
        script: |
          cd ios
          
          echo "üîç Verificando estrutura antes do pod install..."
          
          # Verificar se Podfile existe
          if [ -f "Podfile" ]; then
            echo "‚úÖ Podfile encontrado"
            echo "üìÑ Conte√∫do do Podfile:"
            cat Podfile
          else
            echo "‚ùå Podfile n√£o encontrado!"
            echo "üìÅ Arquivos na pasta ios:"
            ls -la
          fi
          
          # Verificar se j√° existe workspace
          if [ -f "modamaskavo.xcworkspace/contents.xcworkspacedata" ]; then
            echo "‚úÖ Workspace j√° existe"
          else
            echo "‚ÑπÔ∏è  Workspace n√£o existe ainda (normal)"
          fi
          
      - name: Install CocoaPods com diagn√≥stico
        script: |
          cd ios
          
          echo "üì¶ Instalando CocoaPods com diagn√≥stico..."
          
          # Verificar se CocoaPods est√° instalado
          if ! command -v pod &> /dev/null; then
            echo "üì¶ Instalando CocoaPods..."
            gem install cocoapods
          else
            echo "‚úÖ CocoaPods j√° instalado"
            pod --version
          fi
          
          # Executar pod install com logs completos
          echo "üî® Executando pod install..."
          pod install --verbose 2>&1 | tee pod-install.log
          
          POD_RESULT=$?
          
          echo ""
          echo "üìä Resultado do pod install: $POD_RESULT"
          
          if [ $POD_RESULT -eq 0 ]; then
            echo "‚úÖ pod install executado com sucesso!"
          else
            echo "‚ùå pod install falhou!"
            echo "üîç √öltimas linhas do log:"
            tail -30 pod-install.log
            
            echo ""
            echo "üîç Procurando por erros espec√≠ficos:"
            grep -i "error" pod-install.log | head -5
            grep -i "could not" pod-install.log | head -5
            grep -i "unable" pod-install.log | head -5
          fi
          
      - name: Verificar o que foi criado
        script: |
          cd ios
          
          echo "üîç Verificando o que foi criado ap√≥s pod install..."
          
          # Verificar workspace
          if [ -f "modamaskavo.xcworkspace/contents.xcworkspacedata" ]; then
            echo "‚úÖ Workspace criado!"
          else
            echo "‚ùå Workspace N√ÉO foi criado!"
            
            # Verificar se existe algum workspace
            WORKSPACES=$(find . -name "*.xcworkspace" -type d)
            if [ -n "$WORKSPACES" ]; then
              echo "üìÅ Workspaces encontrados:"
              echo "$WORKSPACES"
            else
              echo "‚ùå Nenhum workspace encontrado!"
            fi
          fi
          
          # Verificar Podfile.lock
          if [ -f "Podfile.lock" ]; then
            echo "‚úÖ Podfile.lock criado!"
            echo "üìÑ Primeiras linhas do Podfile.lock:"
            head -20 Podfile.lock
          else
            echo "‚ùå Podfile.lock N√ÉO foi criado!"
          fi
          
          # Verificar pasta Pods
          if [ -d "Pods" ]; then
            echo "‚úÖ Pasta Pods criada!"
            echo "üìÅ Conte√∫do da pasta Pods:"
            ls -la Pods/ | head -10
          else
            echo "‚ùå Pasta Pods N√ÉO foi criada!"
          fi
          
          # Verificar se React foi instalado
          if [ -d "Pods/React-Core" ] || [ -d "Pods/React" ] || [ -d "Pods/RCT-Folly" ]; then
            echo "‚úÖ Componentes React encontrados!"
          else
            echo "‚ùå Componentes React N√ÉO encontrados!"
            if [ -d "Pods" ]; then
              echo "üìÅ Pods dispon√≠veis:"
              ls -la Pods/ | grep -v "^d.*\.$"
            fi
          fi
          
      - name: Tentar corrigir problemas comuns
        script: |
          cd ios
          
          echo "üîß Tentando corrigir problemas comuns..."
          
          # Se pod install falhou, tentar solu√ß√µes
          if [ ! -f "modamaskavo.xcworkspace/contents.xcworkspacedata" ]; then
            echo "‚ö†Ô∏è  Workspace n√£o foi criado, tentando solu√ß√µes..."
            
            # Limpar cache do CocoaPods
            echo "üßπ Limpando cache do CocoaPods..."
            pod cache clean --all
            
            # Remover Pods e tentar novamente
            if [ -d "Pods" ]; then
              echo "üóëÔ∏è  Removendo Pods existentes..."
              rm -rf Pods
            fi
            
            if [ -f "Podfile.lock" ]; then
              echo "üóëÔ∏è  Removendo Podfile.lock..."
              rm -f Podfile.lock
            fi
            
            # Tentar pod install novamente
            echo "üîÑ Tentando pod install novamente..."
            pod install --repo-update --verbose 2>&1 | tee pod-install-retry.log
            
            RETRY_RESULT=$?
            
            if [ $RETRY_RESULT -eq 0 ]; then
              echo "‚úÖ pod install funcionou na segunda tentativa!"
            else
              echo "‚ùå pod install falhou novamente!"
              echo "üîç Erros da segunda tentativa:"
              tail -20 pod-install-retry.log
            fi
          fi
          
      - name: Criar workspace manualmente se necess√°rio
        script: |
          cd ios
          
          echo "üîß Verificando se precisamos criar workspace manualmente..."
          
          if [ ! -f "modamaskavo.xcworkspace/contents.xcworkspacedata" ]; then
            echo "‚ö†Ô∏è  Criando workspace manualmente..."
            
            # Criar estrutura do workspace
            mkdir -p modamaskavo.xcworkspace
            
            # Criar contents.xcworkspacedata
            cat > modamaskavo.xcworkspace/contents.xcworkspacedata << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <Workspace
             version = "1.0">
             <FileRef
                location = "group:modamaskavo.xcodeproj">
             </FileRef>
             <FileRef
                location = "group:Pods/Pods.xcodeproj">
             </FileRef>
          </Workspace>
          EOF
            
            echo "‚úÖ Workspace criado manualmente!"
          else
            echo "‚úÖ Workspace j√° existe!"
          fi
          
      - name: Tentar build com o que temos
        script: |
          cd ios
          
          echo "üî® Tentando build com o que temos..."
          
          # Decidir se usar workspace ou project
          if [ -f "modamaskavo.xcworkspace/contents.xcworkspacedata" ]; then
            echo "üì± Usando workspace para build..."
            BUILD_TYPE="-workspace modamaskavo.xcworkspace"
          else
            echo "üì± Usando project para build..."
            BUILD_TYPE="-project modamaskavo.xcodeproj"
          fi
          
          mkdir -p build
          
          # Tentar build
          xcodebuild $BUILD_TYPE \
                     -scheme modamaskavo \
                     -configuration Release \
                     -destination generic/platform=iOS \
                     -archivePath build/modamaskavo.xcarchive \
                     archive \
                     CODE_SIGNING_REQUIRED=NO \
                     CODE_SIGNING_ALLOWED=NO \
                     SKIP_INSTALL=NO \
                     ONLY_ACTIVE_ARCH=NO \
                     -allowProvisioningUpdates \
                     2>&1 | tee build-attempt.log
          
          BUILD_RESULT=$?
          
          echo ""
          echo "üìä Resultado do build: $BUILD_RESULT"
          
          if [ $BUILD_RESULT -eq 0 ]; then
            echo "‚úÖ Build funcionou!"
            
            # Verificar archive
            if [ -d "build/modamaskavo.xcarchive" ]; then
              echo "‚úÖ Archive criado!"
              
              # Procurar .app
              APP_PATH=$(find build/modamaskavo.xcarchive -name "*.app" -type d | head -1)
              
              if [ -n "$APP_PATH" ]; then
                echo "üì± App encontrado: $APP_PATH"
                
                # Criar IPA
                cd build
                cp -r "$APP_PATH" ./modamaskavo.app
                mkdir -p Payload
                cp -r modamaskavo.app Payload/
                zip -r modamaskavo.ipa Payload/
                
                if [ -f "modamaskavo.ipa" ]; then
                  IPA_SIZE=$(du -sh modamaskavo.ipa | cut -f1)
                  echo "‚úÖ IPA criado: $IPA_SIZE"
                  cp modamaskavo.ipa ../../modamaskavo-debug.ipa
                fi
              fi
            fi
          else
            echo "‚ùå Build falhou!"
            echo "üîç √öltimas linhas do erro:"
            tail -20 build-attempt.log
          fi
          
      - name: Relat√≥rio de diagn√≥stico
        script: |
          echo "üìã RELAT√ìRIO DE DIAGN√ìSTICO"
          echo "=========================="
          
          cd ios
          
          echo "üìä Status dos arquivos:"
          echo "- Podfile: $([ -f "Podfile" ] && echo "‚úÖ" || echo "‚ùå")"
          echo "- Podfile.lock: $([ -f "Podfile.lock" ] && echo "‚úÖ" || echo "‚ùå")"
          echo "- Workspace: $([ -f "modamaskavo.xcworkspace/contents.xcworkspacedata" ] && echo "‚úÖ" || echo "‚ùå")"
          echo "- Pasta Pods: $([ -d "Pods" ] && echo "‚úÖ" || echo "‚ùå")"
          
          echo ""
          echo "üì± IPAs encontrados:"
          find .. -name "*.ipa" -exec ls -lh {} \;
          
          echo ""
          echo "üìÑ Logs dispon√≠veis:"
          ls -la *.log 2>/dev/null || echo "Nenhum log encontrado"
          
    artifacts:
      - ios/pod-install.log
      - ios/pod-install-retry.log
      - ios/build-attempt.log
      - ios/Podfile.lock
      - ios/build/*.ipa
      - ios/build/*.app
      - ios/build/*.xcarchive
      - "*.ipa"
