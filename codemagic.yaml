workflows:
  ios-workflow:
    name: iOS Build Sem Depend√™ncias
    instance_type: mac_mini_m1
    environment:
      node: 18
      xcode: latest
    scripts:
      - name: Install npm dependencies only
        script: |
          npm install --production
          
      - name: Skip CocoaPods - Use pre-built workspace
        script: |
          echo "Pulando CocoaPods, usando workspace existente..."
          cd ios
          
          # Verificar se workspace existe
          if [ -d "modamaskavo.xcworkspace" ]; then
            echo "‚úÖ Workspace encontrado!"
          else
            echo "‚ùå Workspace n√£o existe, criando minimal..."
            # Criar workspace m√≠nimo
            mkdir -p modamaskavo.xcworkspace
            cat > modamaskavo.xcworkspace/contents.xcworkspacedata << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <Workspace version="1.0">
             <FileRef location="group:modamaskavo.xcodeproj">
             </FileRef>
          </Workspace>
          EOF
          fi
          
      - name: Build iOS app DIRETO
        script: |
          cd ios
          
          # Criar pasta build se n√£o existir
          mkdir -p build
          
          # Tentar build direto do projeto
          xcodebuild -project modamaskavo.xcodeproj \
                     -scheme modamaskavo \
                     -configuration Release \
                     -destination generic/platform=iOS \
                     -archivePath build/modamaskavo.xcarchive \
                     archive \
                     CODE_SIGNING_REQUIRED=NO \
                     CODE_SIGNING_ALLOWED=NO
          
          echo "‚úÖ Build conclu√≠do!"
          
      - name: Create IPA manually
        script: |
          cd ios/build
          
          # Verificar se archive foi criado
          if [ ! -d "modamaskavo.xcarchive" ]; then
            echo "‚ùå Archive n√£o encontrado!"
            exit 1
          fi
          
          # Extrair .app do archive
          cp -r modamaskavo.xcarchive/Products/Applications/modamaskavo.app ./
          
          # Criar Payload
          mkdir -p Payload
          cp -r modamaskavo.app Payload/
          
          # Criar IPA
          zip -r modamaskavo.ipa Payload/
          
          echo "‚úÖ IPA criado manualmente!"
          ls -la *.ipa
          
      - name: Verificar e preparar arquivos para download
        script: |
          echo "üîç Verificando arquivos gerados..."
          
          # Verificar estrutura de pastas
          echo "üìÅ Estrutura ios/build:"
          ls -la ios/build/
          
          echo "üìÅ Verificando .ipa:"
          find ios/ -name "*.ipa" -type f -exec ls -lh {} \;
          
          echo "üìÅ Verificando .app:"
          find ios/ -name "*.app" -type d -exec du -sh {} \;
          
          echo "üìÅ Verificando .xcarchive:"
          find ios/ -name "*.xcarchive" -type d -exec du -sh {} \;
          
          # Verificar se IPA foi criado corretamente
          cd ios/build
          if [ -f "modamaskavo.ipa" ]; then
            echo "‚úÖ IPA encontrado!"
            echo "üìä Tamanho do IPA: $(du -h modamaskavo.ipa)"
            echo "üì± Tipo do arquivo: $(file modamaskavo.ipa)"
            
            # Verificar conte√∫do do IPA
            echo "üì¶ Conte√∫do do IPA:"
            unzip -l modamaskavo.ipa | head -20
          else
            echo "‚ùå IPA n√£o foi criado!"
            exit 1
          fi
          
          # Verificar se .app existe
          if [ -d "modamaskavo.app" ]; then
            echo "‚úÖ APP encontrado!"
            echo "üìä Tamanho do APP: $(du -sh modamaskavo.app)"
          else
            echo "‚ùå APP n√£o encontrado!"
          fi
          
          # Verificar se .xcarchive existe
          if [ -d "modamaskavo.xcarchive" ]; then
            echo "‚úÖ XCARCHIVE encontrado!"
            echo "üìä Tamanho do XCARCHIVE: $(du -sh modamaskavo.xcarchive)"
          else
            echo "‚ùå XCARCHIVE n√£o encontrado!"
          fi
          
      - name: Copiar arquivos para raiz (garantir download)
        script: |
          echo "üì§ Copiando arquivos para facilitar download..."
          
          # Copiar IPA para raiz do projeto
          if [ -f "ios/build/modamaskavo.ipa" ]; then
            cp ios/build/modamaskavo.ipa ./modamaskavo-$(date +%Y%m%d-%H%M%S).ipa
            echo "‚úÖ IPA copiado para raiz!"
          fi
          
          # Criar arquivo de informa√ß√µes
          cat > build-info.txt << EOF
          Build Information
          =================
          Date: $(date)
          Build Type: iOS Release (No Code Signing)
          
          Files Generated:
          - IPA: $(ls -lh ios/build/*.ipa 2>/dev/null || echo "Not found")
          - APP: $(ls -ld ios/build/*.app 2>/dev/null || echo "Not found")
          - XCARCHIVE: $(ls -ld ios/build/*.xcarchive 2>/dev/null || echo "Not found")
          
          Project Structure:
          $(tree ios/build/ -L 2 2>/dev/null || ls -la ios/build/)
          EOF
          
          echo "‚úÖ Arquivo de informa√ß√µes criado!"
          
          # Mostrar arquivos finais dispon√≠veis para download
          echo "üì• Arquivos dispon√≠veis para download:"
          ls -la *.ipa 2>/dev/null || echo "Nenhum IPA na raiz"
          ls -la ios/build/*.ipa 2>/dev/null || echo "Nenhum IPA em ios/build"
          ls -la build-info.txt 2>/dev/null || echo "Arquivo de info n√£o encontrado"
          
    artifacts:
      - ios/build/*.ipa
      - ios/build/*.app
      - ios/build/*.xcarchive
      - "*.ipa"
      - build-info.txt
